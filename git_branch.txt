#创建分支
git checkout -b  分支名
git branch 分支名

#查看分支
git branch -a

#切换分支
git checkout  分支名

#如果多人开发，需要把远程master上的代码pull下来
git pull origin master     //如果是自己一个开发就没有必要了，为了保险还是pull

#把创建的分支合并到master上
git merge 分支名

#查看状态及执行提交命令
git status

git push origin master


#其他命令
#更新远程分支列表
git remote update origin --prune

#查看所有分支
git branch -a

#删除远程分支 
git push origin --delete 分支名

#删除本地分支
git branch -d 分支名

#回退版本
#查看代码提交记录，提交id
git log

#回退到指定的id
git reset --hard 提交id

#强推远程
git push -f

#本地创建分支，并将分支推送到远程库
首先在本地创建分支，并将切换到该分支
git push origin 分支名

#向远程仓库推送和pull的时候切不可直接使用命令行，记住添加分支名字
git push origin 分支名
git pull origin 分支名

#如果每次添加分支名比较麻烦，可以进行关联
git branch --set-upstream-to = origin/分支名


#去远程仓库拉取分支的内容
git clone git地址  #主干拉取
git clone -b 分支名 git地址   #分支这样拉取

使用git pull 的目的是确定代码是最新的


#如果当前的分支任务已经完成需要将分支合并到主干
首先切换到主干分支，然后将分支代码合并到主干
git checkout 主干
git merge 分支名
将主干推送上去即可
git push 


#在merge操作时，如果发生合并冲突、会暂定合并，必须手动解决，
1、找到冲突文件，手动合并，解决后，删除git自动写的标注符号，类似于这种带箭头的<<<或>>>
2、通过提交3部曲提交到线上。
     git add .
   git commit -m '解决冲突'
   git push
3、最后再使用合并的指令进行合并
     git merge 分支名

